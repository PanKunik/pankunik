@using Blazor.Services.ImageService
@inject IImageService ImageService

<div class="images-bar">
    <div class="image-bar-first-row">
        <div class="image-wrapper"><img src="@GetImage(ImageIndexes[0])" loading="@GetLoadingSetting()"></div>
        <div class="image-wrapper"><img src="@GetImage(ImageIndexes[1])" loading="@GetLoadingSetting()"></div>
    </div>
    <div class="image-bar-second-row">
        <div class="image-wrapper"><img src="@GetImage(ImageIndexes[2])" loading="@GetLoadingSetting()"></div>
        <div class="image-wrapper"><img src="@GetImage(ImageIndexes[3])" loading="@GetLoadingSetting()"></div>
    </div>
</div>

@code {
    [Parameter]
    public int?[] ImageIndexes { get; set; }
    [Parameter]
    public bool CanBeLazyLoaded { get; set; }

    public string GetImage(int? index)
    {
        if(index.HasValue)
            return ImageService.GetImageAtIndex(index.Value);

        return ImageService.GetRandomImage();
    }

    private string GetLoadingSetting()
        => CanBeLazyLoaded ? "lazy" : "eager";
}